import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class 통나무옮기기 {
	static class Point {
		int x, y, loc, cnt;

		public Point(int x, int y, int loc, int cnt) {
			super();
			this.x = x;
			this.y = y;
			this.loc = loc;
			this.cnt = cnt;
		}

		@Override
		public String toString() {
			return "Point [x=" + x + ", y=" + y + ", loc=" + loc + ", cnt=" + cnt + "]";
		}
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());

		map = new char[N][N];

		int b = 0, e = 0, sx = -1, sy = -1;
		ex = -1;
		ey = -1;
		el = -1;
		for (int i = 0; i < N; i++) {
			String str = br.readLine();
			for (int j = 0; j < N; j++) {
				map[i][j] = str.charAt(j);
				if (map[i][j] == 'B') {
					if (sx == i) {
						// 가로
						q.add(new Point(sx, sy, 0, 0));
					} else if (sy == j) {
						// 세로
						q.add(new Point(sx, sy, 1, 0));
					}

					if (b == 1) {
						sx = i;
						sy = j;
					}

					b++;
					map[i][j] = '0';
				} else if (map[i][j] == 'E') {
					if (ex == i) {
						// 가로
						el = 0;
					} else if (ey == j) {
						// 세로
						el = 1;
					}

					if (e == 1) {
						ex = i;
						ey = j;
					}

					e++;
					map[i][j] = '0';
				}
			}
		}

//		System.out.println(sx + " " + sy + "끝  " + ex + " " + ey + " " + el);
//		System.out.println(q.toString());
//		for (int i = 0; i < N; i++) {
//			for (int j = 0; j < N; j++) {
//				System.out.print(map[i][j] + " ");
//			}
//			System.out.println();
//		}

		ans = 987654321;
		move();
		if(ans==987654321) {
			ans = 0;
		}
		System.out.println(ans);
		q.clear();
	}

	static int N, ex, ey, el, ans;
	static char[][] map;
	static int[][] sel_H, sel_W;
	static Queue<Point> q = new LinkedList<>();

	static void move() {
		sel_H = new int[N][N];
		sel_W = new int[N][N];
		while (!q.isEmpty()) {

			Point node = q.poll();

			int x = node.x;
			int y = node.y;
			int loc = node.loc;
			int cnt = node.cnt;

			if (ex == x && ey == y && el == loc) {
				ans = Math.min(ans, cnt);
				return;
			}

			// 가로
			if (loc == 0) {
				Up_W(x - 1, y, loc, cnt);
				Down_W(x + 1, y, loc, cnt);
				Left_W(x, y - 1, loc, cnt);
				Right_W(x, y + 1, loc, cnt);
				Turn_W(x, y, loc, cnt);
			}
			// 세로
			else if (loc == 1) {
				Up_H(x - 1, y, loc, cnt);
				Down_H(x + 1, y, loc, cnt);
				Left_H(x, y - 1, loc, cnt);
				Right_H(x, y + 1, loc, cnt);
				Turn_H(x, y, loc, cnt);
			}
		}
	}

	static void Up_W(int x, int y, int loc, int cnt) {
		if (x < 0 || sel_W[x][y]==1) {
			return;
		}

		if (map[x][y - 1] == '0' && map[x][y] == '0' && map[x][y + 1] == '0') {
			q.add(new Point(x, y, loc, cnt + 1));
			sel_W[x][y] = 1;
		}

	}
	
	static void Down_W(int x, int y, int loc, int cnt) {
		if (x >= N || sel_W[x][y]==1) {
			return;
		}

		if (map[x][y - 1] == '0' && map[x][y] == '0' && map[x][y + 1] == '0') {
			q.add(new Point(x, y, loc, cnt + 1));
			sel_W[x][y] = 1;
		}

	}

	static void Left_W(int x, int y, int loc, int cnt) {
		if (y - 1 < 0 || sel_W[x][y]==1) {
			return;
		}

		if (map[x][y - 1] == '0') {
			q.add(new Point(x, y, loc, cnt + 1));
			sel_W[x][y] = 1;
		}

	}
	
	static void Right_W(int x, int y, int loc, int cnt) {
		if (y + 1 >= N || sel_W[x][y]==1) {
			return;
		}

		if (map[x][y + 1] == '0') {
			q.add(new Point(x, y, loc, cnt + 1));
			sel_W[x][y] = 1;
		}

	}

	static void Turn_W(int x, int y, int loc, int cnt) {
		if (x - 1 < 0 || x + 1 >= N || sel_H[x][y]==1) {
			return;
		}

		if (map[x - 1][y - 1] == '0' && map[x - 1][y] == '0' && map[x - 1][y + 1] == '0' && map[x + 1][y - 1] == '0'
				&& map[x + 1][y] == '0' && map[x + 1][y + 1] == '0') {
			q.add(new Point(x, y, 1, cnt + 1));
			sel_H[x][y] = 1;
		}
	}

	static void Up_H(int x, int y, int loc, int cnt) {
		if (x - 1 < 0 || sel_H[x][y]==1) {
			return;
		}

		if (map[x - 1][y] == '0') {
			q.add(new Point(x, y, loc, cnt + 1));
			sel_H[x][y] = 1;
		}
	}
	
	static void Down_H(int x, int y, int loc, int cnt) {
		if (x + 1 >= N || sel_H[x][y]==1) {
			return;
		}

		if (map[x + 1][y] == '0') {
			q.add(new Point(x, y, loc, cnt + 1));
			sel_H[x][y] = 1;
		}
	}

	private static void Left_H(int x, int y, int loc, int cnt) {
		if (y < 0 || sel_H[x][y]==1) {
			return;
		}

		if (map[x - 1][y] == '0' && map[x][y] == '0' && map[x + 1][y] == '0') {
			q.add(new Point(x, y, loc, cnt + 1));
			sel_H[x][y] = 1;
		}
	}
	
	private static void Right_H(int x, int y, int loc, int cnt) {
		if (y >= N || sel_H[x][y]==1) {
			return;
		}

		if (map[x - 1][y] == '0' && map[x][y] == '0' && map[x + 1][y] == '0') {
			q.add(new Point(x, y, loc, cnt + 1));
			sel_H[x][y] = 1;
		}
	}

	private static void Turn_H(int x, int y, int loc, int cnt) {
		if (x - 1 < 0 || x + 1 >= N || y - 1 < 0 || y + 1 >= N || sel_W[x][y]==1) {
			return;
		}

		if (map[x - 1][y - 1] == '0' && map[x][y - 1] == '0' && map[x + 1][y - 1] == '0' && map[x - 1][y + 1] == '0'
				&& map[x][y + 1] == '0' && map[x + 1][y + 1] == '0') {
			q.add(new Point(x, y, 0, cnt + 1));
			sel_W[x][y] = 1;
		}

	}

}
